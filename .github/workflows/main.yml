name: Publish new package with the latest PSL

on:
  push:
    branches:
    - main
  schedule:
    - cron: "*/10 * * * *"

env:
  BASEBRANCH: main
  WORKBRANCH: autorelease
  USERNAME: ko-zu (github-actions)
  USEREMAIL: causeless@gmail.com


jobs:
  publish-package-with-psl:
    runs-on: ubuntu-latest
    steps:

    # checkout main temporary, then create local publish branch and update it.
    - uses: actions/checkout@v3
      with:
        ref: ${{ env.BASEBRANCH }}

    - name: Set git config
      run: |
        git config user.name "$USERNAME"
        git config user.email "$USEREMAIL"
    
    - name: Tag main branch
      if: ${{ github.event_name != 'schedule' }}
      run: |
        # parse version from main repo
        BASEVERSION=$(sed -nr 's/^__version__ = "([0-9\.]+)"$/\1/p' setup.py)
        [[ -z "$BASEVERSION" ]] && exit 1
        echo "BASEVERSION=${BASEVERSION}" >> $GITHUB_ENV
        TAG=v${BASEVERSION}
        
        git fetch origin $BASEBRANCH
        git tag ${TAG} origin/$BASEBRANCH
        git push origin ${TAG}

    - name: Update automation branch
      run: |
        git fetch origin $WORKBRANCH
        git checkout origin/$WORKBRANCH -b $WORKBRANCH
    
    - name: Sync with main on new release
      if: ${{ github.event_name != 'schedule' }}
      run: |
        git merge -X theirs --allow-unrelated-histories \
          origin/$BASEBRANCH -m "Automated merge: sync with 'origin/${BASEBRANCH}' v${BASEVERSION}"

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine requests

    - name: Commit the change and build if required
      id: gennewversion
      run: |
        pip install .
        python -m publicsuffixlist.update
        
        # replace the version
        VERSION=$(sed -nr 's/^__version__ = "([0-9\.]+)"$/\1/p' setup.py)
        NEWDATE=$(date -u "+%Y%m%d")
        sed -ri 's/^(__version__ = "[0-9\.]+)\.[0-9]+"$/\1.'${NEWDATE}'"/' setup.py
        NEWVERSION=$(sed -nr 's/^__version__ = "([0-9\.]+)"$/\1/p' setup.py)
        NEWTAG=v${NEWVERSION}-gha
        
        pip install .
        python setup.py sdist --formats=gztar
        python setup.py bdist_wheel --universal
        python -m publicsuffixlist.test

        # break if there is no change in PSL while scheduled run
        if [[ "${{ github.event_name }}" = "schedule" ]] ; then
          if git diff --exit-code publicsuffixlist/public_suffix_list.dat ; then
            echo "No PSL change on scheduled update"
            echo "built_package=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi

        git add setup.py publicsuffixlist/public_suffix_list.dat
        git commit -m "Automated release: ${NEWTAG}"
        git push origin $WORKBRANCH
        git tag ${NEWTAG}
        git push origin ${NEWTAG}

        echo "built_package=true" >> $GITHUB_OUTPUT
    
    - name: Publish package to TestPyPI
      if: ${{ steps.gennewversion.outputs.built_package == 'true' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

